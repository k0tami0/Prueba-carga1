"""
üìå Desaf√≠o: Gesti√≥n de Recaudaciones en una Empresa de Colectivos
Una empresa de transporte cuenta con 3 l√≠neas de colectivos, cada una con 5 coches, lo que da un total de 15 unidades en circulaci√≥n. La empresa emplea 15 choferes, 
cada uno identificado con un legajo √∫nico generado aleatoriamente.
Para llevar un control eficiente de la recaudaci√≥n diaria, se necesita desarrollar un software que permita gestionar y analizar los ingresos obtenidos por cada l√≠nea y coche.
üîπ Funcionalidades del Programa
El sistema debe presentar un men√∫ de opciones con las siguientes funciones:
1Ô∏è‚É£ Cargar planilla de recaudaci√≥n
El chofer debe identificarse ingresando su n√∫mero de legajo.
Se debe validar que el legajo ingresado exista dentro de la matriz de legajos generada previamente.
Si el chofer existe, podr√° ingresar la recaudaci√≥n indicando la l√≠nea y el coche en el que realiz√≥ el viaje.
Un chofer puede cargar m√∫ltiples recaudaciones por d√≠a, en distintas l√≠neas y coches.
Cada coche dentro de cada l√≠nea puede acumular varias recaudaciones diarias.
2Ô∏è‚É£ Mostrar la recaudaci√≥n de cada coche y l√≠nea
Presentar una matriz con la recaudaci√≥n total de cada coche en cada l√≠nea.
3Ô∏è‚É£ Calcular y mostrar la recaudaci√≥n por l√≠nea
Sumar y mostrar la recaudaci√≥n total de cada l√≠nea de colectivos.
4Ô∏è‚É£ Calcular y mostrar la recaudaci√≥n por coche
Permitir al usuario seleccionar un coche y mostrar la suma total de su recaudaci√≥n.
5Ô∏è‚É£ Calcular y mostrar la recaudaci√≥n total
Mostrar el total general de todas las recaudaciones registradas.
6Ô∏è‚É£ Salir del programa


üîπ Requisitos del Desarrollo
‚úîÔ∏è Modularizaci√≥n:
El programa debe estar organizado en m√∫ltiples funciones, incluyendo:
Ingreso de datos
Validaci√≥n de l√≠neas y coches
Generaci√≥n y verificaci√≥n de existencia de legajo
C√°lculos de recaudaciones
‚úîÔ∏è Validaciones:
El legajo ingresado debe existir en la matriz de legajos.
La l√≠nea y el coche seleccionados deben ser v√°lidos.
No debe permitirse el ingreso de valores negativos o inv√°lidos en la recaudaci√≥n.

"""
from funciones_colectivos import *
matriz_generada = False
if matriz_generada == False:
    matriz = crear_matriz(3,5,0)
    matriz_legajos = legajos_aleatorios_en_matriz(matriz)
    mostrar_matriz(matriz_legajos)
    matriz_generada= True
while True:
    menu = menu_colectivos()
    match menu: 
        case 1:
        
            legajo_chofer= int(input("Ingrese su n√∫mero de legajo, debe tener 4 d√≠gitos: "))
            validar_legajo_ingresado = validar_legajo(legajo_chofer, matriz_legajos)
            while validar_legajo_ingresado == False:
                print(f"\nSu legajo {legajo_chofer}, es incorrecto.")
                legajo_chofer= int(input("Ingrese su n√∫mero de legajo, debe tener 4 d√≠gitos: "))
                validar_legajo_ingresado = validar_legajo(legajo_chofer, matriz_legajos)
            else:
                print(f"\nSu legajo {legajo_chofer}, es correcto. Ingresando...\n ")
        case 2: 
            mostrar_matriz(matriz_legajos)